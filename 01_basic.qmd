---
## Metadatos -----------------------------
title: "Introducci칩n al an치lisis geoespacial con R"
subtitle: "Parte 1"
author: "Adri치n Cidre Gonz치lez"
institute: "Universidad de C칩rdoba"

## Presentation --------------------------
format: 
  revealjs:
    preview-links: auto
    theme: [serif, 00_assets/styles/serif-style.scss]
    highlight-style: oblivion # Others: haddock, tango, kate
    transition: fade
    fig-align: center

# Slides -----------------------------
title-slide-attributes: 
  data-background-image: 00_assets/figures/logo-geoforest.png, 00_assets/figures/logo-bosque-digital.png
  data-background-repeat: no-repeat
  data-background-position: 15% 90%, 85% 90%
  data-background-size: 20%, 20%
slide-number: true
center-title-slide: true

## Exec ---------------------------
execute: 
  warning: false

# Transition ------------------------
transition: fade
transition-speed: slow
background-transition: fade

## Filters -------------------------
lightbox: true
fig-responsive: true
---

```{r}
#| label: internal_packages
#| include: false
library(pacman)

p_load(gt, giscoR, mapSpain, mapview, patchwork, sf, terra, tidyverse, tidyterra, withr)

par(bg = "transparent")
```

{{< include 00_assets/partials/intro-acidre.qmd >}}

# Objetivos

-   Manejar datos vectoriales con `sf`

-   Manejar datos raster con `terra`

# Parte 1 - Datos vectoriales {.main-part .unnumbered}

-   Datos espaciales vs datos no espaciales

-   Datos vectoriales

-   Paquete `sf`

-   Formatos de datos vectoriales

-   Pr치ctica 1

{{< fa clock size=xl >}} 15min

## GIS escritorio vs GIS programaci칩n

![](00_assets/figures/01-geospatial-R/desktop-vs-programming.PNG){fig-alt="GIS desktop vs GIS programming" fig-align="center" width="500"}

## Datos espaciales vs datos no espaciales

::::: columns
::: {.column width="50%"}
**Datos no espaciales**: datos que no tienen una localizaci칩n geogr치fica asignada

```{r}
#| label: head-iris
#| echo: false

iris |> 
    head() |> 
    gt() |> 
    opt_stylize(2)
```
:::

::: {.column width="50%"}
**Datos espaciales**: datos asignados a una localizaci칩n geogr치fica (tabla de atributos + coordenadas)

```{r}
#| label: map-ccaa
#| echo: false
ccaa_sf <- mapSpain::esp_get_ccaa(moveCAN = FALSE) |> 
    select(codauto, ine.ccaa.name)

ccaa_sf |> 
    mapview(layer.name = "CCAA")
```

```{r}
#| label: head-ccaa
#| echo: false
ccaa_sf |> 
    st_drop_geometry() |> 
    head(3) |> 
    gt() |> 
    opt_stylize(2)
```
:::
:::::

## Datos vectoriales

-   **Datos vectoriales**: representaci칩n de objetos a trav칠s de puntos, l칤neas o pol칤gonos definidos por coordenadas

```{r}
#| echo: false
#| fig-height: 8
## prep CCAA
andalucia_sf <- esp_get_prov() |> 
    filter(str_detect(nuts2.name, "Andaluc칤a")) |> 
    select(cpro, prov.shortname.es)

## rivers andalucia
rivers_sf <- esp_get_rivers()

rivers_andalucia_sf <- rivers_sf |> 
    st_intersection(andalucia_sf) |> 
    select(id_rio, nombre = NOM_RIO)

## get centers
centroids_sf <- st_centroid(andalucia_sf) |> 
    mutate(lab = "Centroides")

## map
mapview(andalucia_sf, layer.name = "Provincias", zcol = "prov.shortname.es") +
    mapview(
        rivers_andalucia_sf,
        layer.name = "R칤os",
        label      = "nombre",
        lwd        = 2
    ) +
    mapview(
        centroids_sf,
        layer.name  = "Centroides",
        label       = "lab",
        legend      = TRUE,
        col.regions = "red"
    )
```

## Paquetes de R para an치lisis espacial

![](00_assets/figures/01-geospatial-R/rpackages-spatial-2025.jpg){fig-alt="R packages" fig-align="center" width="800"}

## Paquete sf

::: {.incremental}

-   Paquete principal para datos vectoriales con interfaz a GDAL, PROJ y GEOS. Optimizaci칩n a trav칠s de `Rcpp`

-   TODAS las funciones empiezan por `st_`

-   27췈 paquete de R m치s descargado (\> 71 millones)

-   Basado en ***S**imple **F**eatures*, est치ndar del OGC (igual que `geopandas`)

-   Datos guardados como `data.frame` o `tibble` con columna de geometr칤a

-   Datos `tidy`. Manipulaci칩n de tabla de atributos con `tidyverse`

:::

![](00_assets/figures/01-geospatial-R/simple-feature.png){fig-alt="Simple Feature" fig-align="center"}

## Formatos vectoriales

-   **Shapefile:**

    -   El m치s extendido, propiedad ESRI, aceptado por muchos SIG

    -   Formado por varios archivos

    -   M치ximo 255 atributos / Limitaci칩n tipo de dato (254 caracteres)

    -   M치ximo 2 GB de archivo / Limitaci칩n en codificaci칩n (non-ASCII)

::::: columns
::: {.column width="60%"}
![](00_assets/figures/01-geospatial-R/formato-shapefile.png){fig-align="center"}
:::

::: {.column width="40%"}
![](00_assets/figures/01-geospatial-R/formato-shapefile-gpkg.PNG){fig-align="center" height="300"}
:::
:::::

## Formatos vectoriales

-   **GeoPackage (.gpkg):**

    -   Basado en SQLite, propiedad OGC

    -   Base de datos que puede almacenar m칰ltiples archivos vectoriales

![](00_assets/figures/01-geospatial-R/formato-geopackage.png){fig-align="center"}

## Otros formatos

-   **KML (.kml)**: formato de Google ideal para uso en Google Earth (solo WGS 84)

-   **GeoJSON (.geojson)**: formato ligero con estructura JSON. Recomendado para intercambio de datos para servicios web y visores webmapping (limitado en CRS)

## Otros formatos

-   **GeoParquet (.parquet):**

    -   El futuro.

    -   Extensi칩n del formato parquet optimizada para almacenar datos geoespaciales de forma eficiente y escalable.

    -   Se utiliza a trav칠s de los paquetes `arrow` y `geoarrow`

## Shapefile vs GeoPackage vs GeoParquet

-   10,000,000 puntos

-   4 columnas num칠ricas (enteros)

![](00_assets/figures/01-geospatial-R/tictoc-gpkg-shp-parquet.png){fig-align="center"}

![](00_assets/figures/01-geospatial-R/size-gpkg-shp-parquet.png){fig-align="center"}

## Shapefile vs GeoPackage vs GeoParquet

-   10,000,000 puntos

-   10 columnas num칠ricas y 3 columnas character

![](00_assets/figures/01-geospatial-R/tictoc2-gpkg-shp-parquet.png){fig-align="center" height="200"}

![](00_assets/figures/01-geospatial-R/size2-gpkg-shp-parquet.png){fig-align="center" height="200"}

## Leer / Exportar con `sf`

-   `write_sf()` / `st_write()`

```{r}
#| eval: false
## guardar archivo 칰nico
write_sf(spain_sf, "spain.shp")
write_sf(spain_sf, "spain.geojson")
write_sf(spain_sf, "spain.gpkg")

## guardar como capa en base de datos
write_sf(spain_sf, "spain.gpkg", layer = "spain")
```

::: {.fragment .fade-in}
-   `read_sf()` / `st_read()`:

```{r}
#| eval: false
## leer archivo 칰nico
spain_sf <- read_sf("spain.shp")
spain_sf <- read_sf("spain.geojson")
spain_sf <- read_sf("spain.gpkg")

## consultar capas
st_layers("spain.gpkg")

## guardar como capa en base de datos
spain_sf <- read_sf("spain.gpkg", layer = "spain")
```
:::

## 游눩 Pr치ctica 1 {.exercise}

-   Descarga de datos espaciales

-   Exportar y leer datos espaciales

-   Exploraci칩n b치sica de datos espaciales

-   Visualizaci칩n de datos

-   Paquetes a utilizar:

    -   `giscoR`: descarga de l칤mites administrativos de todo el mundo

    -   `mapview`: visualizaci칩n de datos espaciales

    -   `sf`: paquete base para an치lisis de datos vectoriales

    -   `tidyverse`: paquetes para an치lisis y visualizaci칩n de datos

# Parte 2 - Sistemas de Referencia de Coordenadas {.main-part .unnumbered}

-   Definici칩n

-   Tipos de coordenadas

-   Codificaciones

-   Asignar vs Proyectar/Reproyectar

-   Pr치ctica 2

{{< fa clock size=xl >}} 20min

## Definiciones

-   **Geoide**: forma hipot칠tica de la superficie de la Tierra

-   **Elipsoide**: forma geom칠trica que representa la forma de la Tierra

-   **D치tum**: modelo matem치tico que se refiere al origen de las coordenadas

![](00_assets/figures/01-geospatial-R/crs-geoide.png){fig-align="center"}

## Definiciones

-   **Sistemas de Referencia de Coordenadas (SRC)**: sistema de coordenadas que est치 asociado al planeta Tierra a trav칠s de un modelo matem치tico denominado *d치tum* geod칠sico. El CRS utiliza una serie de coordenadas para referirse a la posici칩n de un objeto de forma inequ칤voca.

![](00_assets/figures/01-geospatial-R/crs-proyecciones2.png){fig-align="center"}

## Definiciones

-   **Coordenadas geogr치ficas**: conjunto de valores que definen la posici칩n de un punto en la superficie terrestre (grados).

-   **Coordenadas proyectadas:** la superficie terrestre se proyecta en un plano (normalmente metros).

::::: columns
::: {.column width="50%"}
![](00_assets/figures/01-geospatial-R/crs-geograficas.png){fig-align="center" width="320"}
:::

::: {.column width="50%"}
![](00_assets/figures/01-geospatial-R/crs-geograficas-2.png){fig-align="center" width="476"}
:::
:::::



## Definiciones

-   **Proyecci칩n**: transformaci칩n de un sistema angular tridimensional a un sistema plano bidimensional conocido como sistema cartesiano.

![](00_assets/figures/01-geospatial-R/crs-proyecciones.png){fig-align="center"}

## Entonces, qu칠 debo hacer?

::: {.incremental}

-   Comprobar que tus datos est치n proyectados (tienen CRS)

-   Si no est치n proyectados, preguntar al autor de los datos cu치l es el CRS de 칠stos y **asignar el CRS**

-   Si est치n proyectados, continuar trabajando con ese CRS si el adecuado para mi proyecto

-   Si est치n proyectados, pero quiero trabajar con otro CRS, **reproyectar el CRS** (transformar a otro)

:::

## Uso incorrecto de SRC

-   Coordenadas Casa Blanca: **38.897957, -77.036560** (asignar CRS err칩neo)

![](00_assets/figures/01-geospatial-R/crs-wrong.png){fig-align="center"}

## Uso incorrecto de SRC

-   CRS de Australia (EPSG 28350) (reproyectar a un CRS que no es de mi zona)

```{r}
#| echo: false
mapSpain::esp_get_country() |> 
    ggplot() +
    geom_sf() +
    coord_sf(
        datum = "EPSG:28350",
        crs   = "EPSG:28350"
    )
```

## Uso incorrecto de SRC

-   Utilizar un CRS local (de Espa침a) para un mapa mundial

```{r}
#| echo: false
world_sf <- gisco_get_countries() |> 
    st_transform("EPSG:25830")

spain_sf <- filter(world_sf, CNTR_ID == "ES")

ggplot(spain_sf) +
    geom_sf() +
    ggplot(world_sf) +
    geom_sf() 
```

## CRS generales

-   EPSG:4326 es el sistema WGS84 de coordenadas geogr치ficas m치s utilizado en todo el mundo

-   EPSG:3035 sistema ETRS89-LAEA para trabajar en proyectos europeos

-   Coordenadas UTM: EPSG:25828, EPSG:25829, EPSG:25830, EPSG:25831

![](00_assets/figures/01-geospatial-R/crs-utm-spain.png){fig-align="center" width="526"}

## Funciones de `sf` con CRS

-   `st_crs()`: objeto con todos los metadatos del CRS del objeto

-   `st_set_crs()`: asignar CRS. Se utiliza cuando nos dan datos sin CRS

-   `st_transform()`: transformar de un CRS a otro

```{r}
st_crs(spain_sf)
```


## 游눩 Pr치ctica 2 {.exercise}

-   Explorar CRS de un objeto

-   Asignar CRS

-   Transformar CRS

-   Paquetes a utilizar:

    -   `mapview`: visualizaci칩n de datos espaciales

    -   `sf`: paquete base para an치lisis de datos vectoriales

# Parte 3 - Operaciones en geometr칤as {.main-part .unnumbered}

-   Medidas

-   Funciones predicado

-   Transformaciones unarias

-   Transformaciones binarias

-   Pr치cticas 3 y 4

{{< fa clock size=xl >}} 25min

## Medidas

```{r}
#| echo: false
tibble(
  Medida = c("st_length", "st_area", "st_distance", "st_perimeter"),
  Definicion = c(
    "Calcula la longitud de la geometr칤a",
    "Calcula la superficie de la geometr칤a",
    "Calcula la distancia entre pares de geometr칤as",
    "Calculate el per칤metro de un pol칤gono"
  ),
  Geometrias = c(
    "Linestring, multilinestring",
    "Polygon, multipolygon",
    "Cualquiera",
    "Polygon, multipolygon"
  )
) |> 
  gt() |> 
  opt_stylize(2) |> 
    tab_style(
        style     = cell_text(size = "25px"),
        locations = cells_body()
    ) |> 
    tab_style(
        style     = cell_text(size = "25px"),
        locations = cells_column_labels()
    )
```

## 游눩 Pr치ctica 3 {.exercise}

-   Medidas

-   Paquetes a utilizar:

    -   `mapSpain`: visualizaci칩n de datos espaciales

    -   `sf`: paquete base para an치lisis de datos vectoriales

    -   `tidyverse`: paquetes para an치lisis de datos

    -   `units`: modificar unidades de las medidas

## Funciones predicado

Son funciones que comprueban que una determinana caracter칤stica espacial es cierta. El resultado de estas funciones es TRUE/FALSE

```{r}
#| label: tbl-predicates
#| echo: false

# Crear la tabla
tibble(
  Predicado = c(
    "st_contains",
    "st_covers",
    "st_crosses",
    "st_touches",
    "st_disjoint",
    "st_overlaps"
  ),
  Definicion = c(
    "Ning칰n punto de B se encuentra en el exterior ni en el borde de A",
    "Ning칰n punto de B se encuentra en el exterior de A y al menos un punto est치 dentro",
    "A y B tienen alg칰n punto interior en com칰n (no todos)",
    "A y B tienen alg칰n punto del borde en com칰n (pero no interiores)",
    "A y B no tienen ning칰n punto en com칰n",
    "A y B tienen puntos en com칰n, con la misma dimensi칩n, y sin contener uno al otro completamente"
  ),
  Contrario_de = c(
    "st_within",
    "st_covered_by",
    NA,
    NA,
    "st_intersects",
    NA
  )
) |> 
    gt() |> 
    opt_stylize(2) |> 
    tab_style(
        style     = cell_text(size = "20px"),
        locations = cells_body()
    ) |> 
    tab_style(
        style     = cell_text(size = "20px"),
        locations = cells_column_labels()
    ) |> 
    sub_missing()
```

::: {style="text-align: center; margin-top: 1em"}
[Relaciones espaciales - PostGIS](https://postgis.net/workshops/postgis-intro/spatial_relationships.html){target="_blank" style="text-align: center"}
:::

::: callout-important
## Recuerda

Siempre que se realicen operaciones entre dos objetos distintos. **SIEMPRE deben tener el mismo SRC**.
:::

## Funciones predicado

-   R칤os que cruzan la frontera de la provincia de C칩rdoba?

```{r}
#| echo: false
cordoba_sf <- esp_get_prov() |> 
  filter(cldr.prov.name.en == "C칩rdoba")
```

```{r}
(rivers_idx <- st_crosses(x = cordoba_sf, y = rivers_sf))
```

::: {.fragment .fade-in}
```{r}
#| code-line-numbers: "3"
mapview(cordoba_sf) +
  mapview(
    rivers_sf[rivers_idx[[1]], ]
  )
```
:::

## Funciones predicado - Casos de uso

-   Contar elementos que cumplen una condici칩n espacial:

    -   Cu치ntos lobos se han avistado en el municipio de Mieres en los 칰ltimos 20 a침os?

    -   A cu치ntos municipios va a afectar el nuevo Parque Nacional?

::: {.fragment .fade-in}
-   Filtros espaciales (`st_filter(x, y, .predicate)`):

    -   Filtrar los municipios con los cu치les interseca el nuevo parque nacional.

    -   Filtrar las parcelas que son colindantes con mi parcela.

    -   Filtrar las 치reas de servicio que se encuentran en la ciudad de Madrid.
:::

::: {.fragment .fade-in}
-   Uniones espaciales (`st_join(x, y, join)`):

    -   Unir parcelas de muestreo con el cant칩n en el que se encuentran

    -   Unir datos de especies en en peligro de extinci칩n con los pol칤gonos de regiones del bosque donde se encuentran
:::

## Filtros

::::: columns
::: {.column width="50%"}
**Filtros no espaciales**: filtros basados en alguna columna de los datos

```{r}
#| eval: false
rivers_sf |> 
  filter(NOM_RIO == "Rio Tajo")
```

```{r}
#| echo: false
rivers_sf |> 
  filter(NOM_RIO == "Rio Tajo") |> 
  mapview(legend = FALSE)
```
:::

::: {.column width="50%"}
**Filtros espaciales**: utilizan una relaci칩n espacial entre dos objetos

```{r}
#| eval: false
st_filter(
  x = rivers_sf,
  y = cordoba_sf,
  .predicate = st_intersects
)
```

```{r}
#| echo: false
st_filter(
  x = rivers_sf,
  y = cordoba_sf,
  .predicate = st_intersects
) |> mapview(legend = FALSE, color = "red") +
    mapview(cordoba_sf, legend = FALSE)
```
:::
:::::

## Uniones espaciales

Unen las columnas de un objeto a otro basado en un predicado espacial.

```{r}
st_join(
  x = rivers_sf |> select(NOM_RIO),
  y = ccaa_sf,
  join = st_intersects
)
```

## Transformaciones unarias

Transformaciones que ocurren a **cada geometr칤a de un objeto**

```{r}
#| code-line-numbers: "1|2|3-4"
rivers_cordoba_sf <- st_filter(x = rivers_sf, y = cordoba_sf)
buffer_rivers_sf <- st_buffer(rivers_cordoba_sf, dist = 1000)
mapview(buffer_rivers_sf) +
    mapview(rivers_cordoba_sf, color = "red")
```

## Transformaciones binarias

Transformaciones que ocurren **sobre las geometr칤as de dos objetos**

```{r}
#| echo: false
tibble(
  `Transformaci칩n` = c(
    "st_intersection",
    "st_union",
    "st_combine",
    "st_difference",
    "st_sym_difference",
    "st_crop"
  ),
  `Definici칩n` = c(
    "Devuelve la parte que se superpone de las geometr칤as",
    "Devuelve el combinado de dos objetos (dissolve)",
    "Combina todas las geometr칤as de un objeto en una geometr칤a 'multi'",
    "Devuelve las geometr칤as del primer objeto que no intersectan con las geometr칤as del segundo objeto",
    "Devuelve la parte de las geometr칤as que no intersectan (es lo contrario de st_intersection)",
    "Corta un objeto utilizando un rect치ngulo (p. ej. el rect치ngulo m칤nimo envolvente de otro objeto)"
  )
) |> 
  gt() |> 
  opt_stylize(2)
```

![](00_assets/figures/01-geospatial-R/transf-binarias.png){fig-align="center" width="434"}

## 游눩 Pr치ctica 4 {.exercise}

-   Filtros espaciales

-   Uniones espaciales

-   Paquetes a utilizar:

    -   `geodata`: descarga de datos (GBIF, Worldclim, elevaci칩n...)

    -   `giscoR`: descarga de l칤mites administrativos de todo el mundo

    -   `mapview`: visualizaci칩n de datos espaciales

    -   `sf`: paquete base para an치lisis de datos vectoriales

    -   `tidyverse`: paquetes para an치lisis de datos

# Parte 4 - Datos r치ster {.main-part .unnumbered}

-   Introducci칩n

-   Datos r치ster con `terra`

-   Bandas / Capas

-   An치lisis de datos r치ster

-   Pr치ctica 5

{{< fa clock size=xl >}} 30min

## Introducci칩n

-   Tipo de representaci칩n espacial que utiliza una grilla de celdas rectangulares para organizar y representar informaci칩n geoespacial.

-   Son b치sicamente im치genes georreferenciadas

-   Pueden contener datos continuos o discretos

-   Im치genes satelitales, ortofotos, variables ambientales...

```{r}
#| echo: false 
#| label: fig-dem-aspect
## download DEM
dem_sr <- geodata::elevation_30s("ES", tempdir()) |> 
  project(andalucia_sf) |> 
  crop(andalucia_sf, mask = TRUE)

## calculate aspect and classify
aspect_sr <- terrain(dem_sr, "aspect")

mat <- matrix(c(-Inf, 22.5, 1,
                22.5, 67.5, 2,
                67.5, 112.5, 4,
                112.5, 157.5, 6,
                157.5, 202.5, 8,
                202.5, 247.5, 7,
                247.5, 292.5, 5,
                292.5, 337.5, 3,
                337.5, Inf, 1),
              ncol = 3, byrow = TRUE)

### Reclasificar
aspect_sr <- classify(aspect_sr, rcl = mat) |> as.factor()
levels(aspect_sr)[[1]][,2] <- 
  c("N", "NE", "NW", "E", "W", "SE", "SW", "S")

withr::with_par(list(mfrow = c(1, 2), bg = "transparent"), {
  plot(dem_sr, main = "Elevaci칩n", col = hcl.colors(1000, "Spectral", rev = T), axes = F)
  plot(aspect_sr, main = "Orientaci칩n", col = hcl.colors(8, "Oslo"), axes = F)
})

```

## Introducci칩n

-   En esencia, son una matriz de datos

```{r}
#| echo: false 
r <- rast(nrows = 10, ncols = 10)

# Fill it with random values
values(r) <- rnorm(ncell(r), mean = 5, sd = 5)

# Plot the raster
plot(r, col = terrain.colors(10))  # "classes" style keeps it simple
```

## Introducci칩n

-   En esencia, son una matriz de datos

```{r}
#| echo: false 
# Plot the raster
plot(r, col = terrain.colors(10))  # "classes" style keeps it simple

# Add text labels at cell centers
text(r, labels = values(r))
```

## Introducci칩n

-   En esencia, son una matriz de datos

```{r}
#| echo: false 
matrix(r, nrow = 10) |> round(0)
```

## Introducci칩n

-   Resoluci칩n: se refiere al tama침o del p칤xel.

    -   Cu치nto m치s peque침os mayor resoluci칩n (HD, 4K)

    -   Cu치nto m치s grandes menor resoluci칩n (144p, 480p)

::: {.fragment .fade-in}
-   Resoluci칩n espacial: se mide en las unidades del SRC (grados, metros)
:::

```{r}
#| echo: false
withr::with_par(list(mfrow = c(1, 2), bg = "transparent"), {
  plot(dem_sr, col = hcl.colors(1000, "Spectral", rev = T), axes = F)
  plot(aggregate(dem_sr, 20), col = hcl.colors(1000, "Spectral", rev = T), axes = F)
})
```

## Datos r치ster con `terra`

::::: columns
::: {.column width="80%"}
-   `SpatRaster`: nombre del objeto de estructura r치ster dentro del paquete `terra`

-   Cu치ndo solo es una capa es un r치ster monobanda
:::

::: {.column width="20%"}
![](00_assets/figures/01-geospatial-R/package-terra.png){fig-align="right" width="89"}
:::
:::::

::::: columns
::: {.column width="50%"}
```{r}
#| echo: false
dem_agg_sr <- aggregate(dem_sr, fact = 10) |> project("EPSG:25830")
print(dem_agg_sr)
```
:::

::: {.column width="50%"}
```{r}
#| echo: false

withr::with_par(list(mfrow = c(1, 1), bg = "transparent"), {
  plot(dem_agg_sr, axes = FALSE)
})
```
:::
:::::

## Bandas / Capas {.special-size}

Distintos r치ster dentro de un `SpatRaster`. Condiciones:

-   Misma resoluci칩n espacial

-   Misma extensi칩n

-   Mismo SRC

```{r}
#| echo: false
slope_sr <- terrain(dem_sr, "slope")
terrain_sr <- c(dem_sr, aspect_sr, slope_sr)
names(terrain_sr) <- c("Elevacion", "Orientacion", "Pendiente")

terrain_sr
```

```{r}
#| label: fig-terrain
#| fig-height: 3
#| echo: false
withr::with_par(list(mfrow = c(1, 1), bg = "transparent"), {
  plot(terrain_sr, nr = 1, axes = F, col = hcl.colors(1000, "Spectral", rev = T))
})


```

## An치lisis de datos r치ster

R치sters del terreno:

-   Modelo Digital de Elevaciones (MDE/DEM): modelo que representa la altitud sobre el nivel del mar.

-   Curvas de nivel: l칤neas que marcan la altitud en intervalos de altitud iguales

-   Pendiente: 치ngulo entre la superficie y la vertical

-   Orientaci칩n: direcci칩n hacia la que apunta la pendiente

-   Hillshade: simula el sombreado sobre el terreno

```{r}
#| code-line-numbers: "1|3|5-6|8-9|11,6,9|1-11"

dem_sr <- geodata::elevation_30s("CHE", path = tempdir())

cont_vect <- terra::as.contour(dem_sr, nlevels = 8)

pendiente_sr <- terra::terrain(dem_sr, v = "slope")
pendiente_rad_sr <- terra::terrain(dem_sr, v = "slope", unit = "radians")

orientacion_sr <- terra::terrain(dem_sr, v = "aspect")
orientacion_rad_sr <- terra::terrain(dem_sr, v = "aspect", unit = "radians")

hillshade_sr <- terra::shade(pendiente_rad_sr, orientacion_rad_sr)
```

## An치lisis de datos r치ster

Sistemas de Referencia de coordenadas:

-   `project(x, y)`: transformar el SRC

-   `crs(x)`: consultar el SRC

-   `crs(x) <- "EPSG:25830"`: asignar SRC

## An치lisis de datos r치ster {.special-size}

-   `crop(x, y)`: cortar el raster `x` a la extensi칩n de `y`

-   `mask(x, y)`: enmascarar el raster `x` a la extensi칩n de `y`

-   `crop(x, y, mask = TRUE)`: cortar y luego enmascarar

```{r}
#| code-line-numbers: "1-4|6|7|8"
## descargar datos y reproyectar
dem_sr <- geodata::elevation_30s("ES", path = tempdir()) |> 
  project(crs(cordoba_sf))
names(dem_sr) <- "Elevacion"
## cortar/enmascarar
crop_sr <- crop(dem_sr, cordoba_sf)
mask_sr <- mask(dem_sr, cordoba_sf)
crop_mask_sr <- crop(dem_sr, cordoba_sf, mask = TRUE)
```

```{r}
#| echo: false
#| label: fig-terrain-cordoba
#| fig-height: 4
## plot
with_par(list(mfrow = c(1, 4), bg = "transparent"), {
  
  plot(dem_sr, main = "Original", col = hcl.colors(1000, "Terrain2"), legend = FALSE)
  plot(vect(cordoba_sf), add = TRUE)
  
  plot(crop_sr, main = "crop(x, y)", col = hcl.colors(1000, "Terrain2"), legend = FALSE)
  plot(vect(cordoba_sf), add = TRUE)
  
  plot(mask_sr, main = "mask(x, y)", col = hcl.colors(1000, "Terrain2"), legend = FALSE)
  plot(vect(cordoba_sf), add = TRUE)
  
  plot(crop_mask_sr, main = "crop(x, y, mask = TRUE)", col = hcl.colors(1000, "Terrain2"), legend = FALSE)
  plot(vect(cordoba_sf), add = TRUE)
  
})
```

## An치lisis de datos r치ster

Clasificar valores continuos a discretos.

-   `classify(x, rcl)`: clasifica los valores de `x` utilizando los valores de una matriz.

::::: columns
::: {.column width="30%"}
```{r}
#| echo: false
mat <- matrix(c(-Inf, 500, 1,
                500, 1000, 2,
                1000, 1500, 3,
                1500, 2000, 4,
                2000, 2500, 5,
                2500, 3000, 6,
                3000, 3500, 7),
              ncol = 3, byrow = TRUE)

dem_class <- classify(dem_sr, mat) |> as.factor()

print(mat)
```
:::

::: {.column width="70%"}
```{r}
#| echo: false
with_par(list(mfrow = c(1, 2), bg = "transparent"), {
  plot(dem_sr, main = "Original", col = hcl.colors(1000, "Terrain2"))
  plot(dem_class, main = "Clasificado", col = hcl.colors(7, "Terrain2"))
})
```
:::
:::::

## An치lisis de datos r치ster

Extraer valores en determinados puntos.

```{r}
#| echo: false
## get random points
points_vect <- with_seed(123, {
  spatSample(dem_sr, 22, as.points = TRUE) |>
    filter(!is.na(Elevacion)) %>% 
    mutate(id = 1:nrow(.))
}) 
```

-   `extract(x, y)`: extraer valores de `x` en los puntos `y`

```{r}
#| eval: false
terra::extract(dem_sr, points_vect)
```

::::: columns
::: {.column width="30%"}
```{r}
#| echo: false
terra::extract(dem_sr, points_vect)
```
:::

::: {.column width="70%"}
```{r}
#| echo: false
#| fig-height: 5
ggplot() +
  geom_spatraster(data = dem_sr) +
  scale_fill_cross_blended_c() +
  geom_spatvector(data = points_vect) +
  geom_spatvector_text(data = points_vect, aes(label = id), nudge_y = -.2) +
  labs(fill = "Elevaci칩n (m)") +
  theme_void() +
  theme(
    plot.background = element_rect(fill = "transparent", colour = NA),
    panel.background = element_rect(fill = "transparent", colour = NA)
  )
```
:::
:::::

## An치lisis de datos r치ster

Modificar resoluci칩n espacial

-   `aggregate(x, fact)`: reducir la resoluci칩n espacial

-   `disagg(x, fact)`: aumentar la resoluci칩n espacial

-   `resample(x, y)`: modifica la resoluci칩n espacial y la extensi칩n de `x` para que sean las mismas que las de `y`

::: callout-note
## Nota

Estas funciones tienen el argumento `method` que es de importancia:

-   `method = "near"`: para interpolar valores utiliza k-nearest neightbour (para variables categ칩ricas)

-   `method = "billinear"`: interpolaci칩n bilinear (para variables continuas)
:::

## Formatos r치ster

::: {.incremental}

* GeoTIFF (.tif, .tiff): de los m치s estandarizados

* Cloud Optimized GeoTIFF (.tif): optimizado para la nube

* Enhanced Compression Wavelet (.ecw): alto ratio de lectura y compresi칩n

* ASCII (.asc): utiliza n칰meros entre 0 y 255 para almacenar datos

* File Geodatabase (.gdb): base de datos de Esri

:::

## 游눩 Pr치ctica 5 {.exercise}

-   Importar/Exportar datos r치ster

-   Exploraci칩n b치sica de datos r치ster

-   Descarga y c치lculo de modelos del terreno

-   Cortar/Enmascarar

-   Reproyectar SRC

-   Reclasificar valores de un r치ster

-   Extraer valores de un r치ster

-   Modificar resoluci칩n espacial

-   Paquetes a utilizar:

    -   `geodata`: descarga de datos (GBIF, Worldclim, elevaci칩n...)
    
    -   `geoperu`: descarga de 치reas protegidas de Per칰
    
    -   `mapview`: visualizaci칩n interactiva de datos
    
    -   `terra`: paquete base para datos r치ster

    -   `sf`: paquete base para datos vectoriales

    -   `tidyverse`: paquetes para an치lisis de datos
